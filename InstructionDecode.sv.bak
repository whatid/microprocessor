import lc3b_types::*;
module InstructionDecode

(
	input clk,
	/*IR signals*/	
	input lc3b_reg dest,
	input lc3b_reg src1, 
	input lc3b_reg src2,
   input lc3b_offset6 ir_offset6,
   input lc3b_offset9 ir_offset9,
	input lc3b_opcode opcode, 
	input lc3b_word pc_in,
	/*Outputs*/
	output lc3b_offset6 ID_adj6_out,
	output lc3b_offset9 ID_adj9_out,
	output lc3b_word ID_src1_out, 
	output lc3b_word ID_src2_out,        
	output lc3b_control_word ctrl,
	output logic ID_branch_enable,
	ouput lc3b_word pc_out,
	output logic mem_read,
	output logic mem_write,
	output lc3b_mem_wmask mem_byte_enable
);

assign pc_out = pc_in;

ID_Datapath InstructionDecode_dp 
(
	.dest,
	.src1, 
	.src2,
   .offset6(ir_offset6),
   .offset9(ir_offset9),
	.ctrl,
	/*Outputs*/
	.adj6_out(ID_adj6_out),
	.adj9_out(ID_adj9_out),
	.sr1_out(ID_sr1_out),
	.sr2_out(ID_sr2_out)
	.branch_enable(ID_branch_enable)
);

/*Control ROM*/
ConrolROM ControlROM_Unit
(
	.control_opcode(opcode),
	.ctrl(ctrl),
	.mem_read(mem_read),	
	.mem_write(mem_write),
	.mem_byte_enable(mem_byte_enable)
);


endmodule: InstructionDecode
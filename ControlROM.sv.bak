import lc3b_types::*;

module ControlROM
(
	input lc3b_opcode opcode, 
	output lc3b_control_word ctrl,	
);

always_comb
begin
	
	/* Default assignments */
	ctrl.opcode = opcode; 
	ctrl.load_cc = 1'b0; 			
    ctrl.load_mar = 1'b0;
	ctrl.load_mdr = 1'b0;
	ctrl.pcmux_sel = 1'b0;
	ctrl.storemux_sel = 1'b0;
	ctrl.alumux_sel = 1'b0;
	ctrl.regfilemux_sel = 1'b0;
	ctrl.marmux_sel = 1'b0;
	ctrl.mdrmux_sel = 1'b0;
	ctrl.mem_read = 1'b0;
	ctrl.mem_write = 1'b0; 

	/* Assign control signals based on opcode */ 
	/* Checkpoint 1: handle ADD, AND, NOT, LDR, STR, BR instructions */ 

	case(opcode)
		op_add: begin
			ctrl.aluop = alu_add; 
			ctrl.load_cc = 1; 
	
		end
		op_and:
			ctrl.aluop = alu_and; 
			ctrl.load_cc = 1; 
	
		op_not: 
			ctrl.aluop = alu_not; 
			ctrl.load_cc = 1; 
		
		op_ldr:
			ctrl.aluop = alu_add; 
			ctrl.alumux_sel = 1; 
			ctrl.load_mar = 1; 
			ctrl.mdrmux_sel = 1; 
			ctrl.load_mdr = 1; 
			ctrl.mem_read = 1; 
			ctrl.load_cc = 1; 
			ctrl.regfilemux_sel = 1; 
		op_str: 
			ctrl.aluop = alu_add; 
			ctrl.alumux_sel = 1; 
			ctrl.load_mar = 1; 
			ctrl.storemux_sel = 1; 
			ctrl.load_mdr = 1; 
			ctrl.mem_write = 1; 
		op_br:
			/* Do Nothing */ 

		default:
			ctrl = 0;   /* unknown opcode, set control word to zero */ 

	endcase
end

endmodule: ControlROM
